#!/usr/bin/python

# sudo pip install pyusb==1.0.0b2
#
# Slow on OS X? See https://github.com/libusb/libusb/issues/108

from sys import argv
import array
import binascii
import struct
import sys
import usb.core
import usb.util

VIDPIDPAIRS = {
    "Objective Development Shared": (0x16c0, 0x05dc),
    "Reilly's Hacked Arduino": (0x2341, 0x8036),
    "WebLight": (0x1209, 0xa800),
}

BOS_DESCRIPTOR_WEBUSB = array.array('B', [56, 182, 8, 52, 169, 9, 160, 71,
                                          139, 253, 160, 118])
BOS_DESCRIPTOR_WINUSB = array.array('B', [223, 96, 221, 216, 137, 69, 199,
                                          76, 156, 210, 101, 157])

WEBUSB_DESCRIPTOR_SET_HEADER = 0
WEBUSB_URL = 3

def ParseURLDescriptor(r):
  WEBUSB_SCHEME_HTTP = 0
  WEBUSB_SCHEME_HTTPS = 1
  if int(r[0]) != len(r):
    print("URL Descriptor bLength incorrect")
    sys.exit(1)

  bDescriptorType = int(r[1])
  if bDescriptorType != WEBUSB_URL:
    print("URL Descriptor bDescriptorType unexpected:", bDescriptorType)
    sys.exit(1)

  bScheme = int(r[2])
  scheme = None
  if bScheme == WEBUSB_SCHEME_HTTP:
    scheme = "http://"
  elif bScheme == WEBUSB_SCHEME_HTTPS:
    scheme = "https://"
  else:
    print("URL Descriptor bScheme unexpected:", bScheme)
    sys.exit(1)

  return "%s%s" % (scheme, r[3:].tostring())

def ParseGetAllowedOrigins(dev, r):
  bLength = int(r[0])

  bDescriptorType = int(r[1])
  if bDescriptorType != WEBUSB_DESCRIPTOR_SET_HEADER:
    print("URL Descriptor bDescriptorType unexpected:", bDescriptorType)
    sys.exit(1)
  ss = ["Count: %d" % int(bLength - 5)]
  for i in range(0, bLength - 5):
    iOrigin = int(r[5] + i)
    result = dev.ctrl_transfer(0xC0, bVendorCode,
                               iOrigin, WEBUSB_REQUEST_GET_URL, 253)
    ss.append("%d: %s" % (iOrigin, ParseURLDescriptor(result)))
  return "\n".join(ss)

if len(argv) < 3:
    print('usage: %s <vid in hex> <pid in hex>' % argv[0])
    print('\nCommon VID/PID pairs:\n')

    for k, v in VIDPIDPAIRS.items():
        print("%40s: %x %04x" % (k, v[0], v[1]))

    sys.exit(1)

VENDOR = int(argv[1], 16)
PRODUCT = int(argv[2], 16)

dev = usb.core.find(idVendor=VENDOR, idProduct=PRODUCT)
if dev is None:
    raise ValueError("Did not find device with VID/PID 0x%x/0x%04x" % (
        VENDOR, PRODUCT))

print(str(dev))

# bmRequestType
# USBRQ_DIR_HOST_TO_DEVICE | USBRQ_TYPE_VENDOR | USBRQ_RCPT_DEVICE = 0x40
# USBRQ_DIR_DEVICE_TO_HOST | USBRQ_TYPE_VENDOR | USBRQ_RCPT_DEVICE = 0xC0
# USBRQ_DIR_DEVICE_TO_HOST | USBRQ_TYPE_STANDARD | USBRQ_RCPT_DEVICE = 0x80

# bRequest = whatever you specified for your custom request
# wValue
# wIndex
# (optional) data

if False:
    # Device descriptor
    result = dev.ctrl_transfer(0x80, 6, 0x0100, 0, 64)
    print("Device", len(result), binascii.hexlify(result))

    # Manufacturer String Descriptor
    result = dev.ctrl_transfer(0x80, 6, 0x0301, 0, 64)
    print("Manufacturer", len(result), binascii.hexlify(result))

    # Product String Descriptor
    result = dev.ctrl_transfer(0x80, 6, 0x0302, 0, 64)
    print("Product", len(result), binascii.hexlify(result))

    # Serial String Descriptor
    result = dev.ctrl_transfer(0x80, 6, 0x0303, 0, 64)
    print("Serial", len(result), binascii.hexlify(result))

def PrintDivider():
    print("\n=====\n")

# BOS
bos = dev.ctrl_transfer(0x80, 6, 0x0f00, 0, 64)
PrintDivider()
print("BOS", len(bos))

(bos_descriptor_length,
 bos_descriptor_type,
 bos_length,
 device_capabilities_count) = struct.unpack('BBHB', bos[0:5])

print("%40s: %d" % ("Descriptor length", bos_descriptor_length))
print("%40s: %d" % ("Descriptor type", bos_descriptor_type))
print("%40s: %d" % ("Total length", bos_length))
print("%40s: %d" % ("Device caps count", device_capabilities_count))

if bos_length != len(bos):
  print("BOS declared length isn't sane")
  sys.exit(1)

bos_pointer = 5

WEBUSB_REQUEST_GET_ALLOWED_ORIGINS = 1
WEBUSB_REQUEST_GET_URL = 2

while bos_pointer < bos_length:
  bLength = int(bos[bos_pointer])
  descriptor = bos[bos_pointer:bos_pointer + bLength]

  bDescriptorType = int(descriptor[1])
  bDevCapabilityType = int(descriptor[2])
  bReserved = int(descriptor[3])
  PlatformCapabilityUUID = descriptor[4:16]

  if PlatformCapabilityUUID == BOS_DESCRIPTOR_WEBUSB:
    print("WebUSB Descriptor")
    bcdVersion, bVendorCode, iLandingPage = struct.unpack('HBB',
                                                          descriptor[20:44])

    print("%40s: %x" % ("Protocol version (BCD)", bcdVersion))
    print("%40s: %d" % ("Vendor-specific request", bVendorCode))
    print("%40s: %d" % ("Landing page index", iLandingPage))

    result = dev.ctrl_transfer(0xC0, bVendorCode,
                               0, WEBUSB_REQUEST_GET_ALLOWED_ORIGINS, 253)
    print("GET_ALLOWED_ORIGINS:", ParseGetAllowedOrigins(dev, result))

  if PlatformCapabilityUUID == BOS_DESCRIPTOR_WINUSB:
    print("WinUSB Descriptor %d %s" % (bLength, binascii.hexlify(descriptor)))

  bos_pointer += bLength
